<?xml version="1.0" encoding="UTF-8"?>
<xwikidoc>
<web>Blog</web>
<name>BlogBatchImportSheet</name>
<language></language>
<defaultLanguage>en</defaultLanguage>
<translation>0</translation>
<parent>Blog.BlogBatchImport</parent>
<creator>xwiki:XWiki.Admin</creator>
<author>xwiki:XWiki.Admin</author>
<customClass></customClass>
<contentAuthor>xwiki:XWiki.Admin</contentAuthor>
<creationDate>1388530800000</creationDate>
<date>1388530800000</date>
<contentUpdateDate>1388530800000</contentUpdateDate>
<version>1.1</version>
<title>Blog Batch Import</title>
<defaultTemplate></defaultTemplate>
<validationScript></validationScript>
<comment></comment>
<minorEdit>false</minorEdit>
<syntaxId>xwiki/2.1</syntaxId>
<hidden>false</hidden>
<content>
This is the home of the blog batch import. Before using this tool, please visit [[BlogBatchImportHelp]] to install the tool properly and follow the instructions on how to use the tool.

{{include document="BatchImport.BatchImportMacros" /}}

{{velocity}}
## include the css from this page
#set($discard = $xwiki.ssx.use("BatchImport.BatchImportSheet"))
## all the possible filds to map
#set($fieldsToMap = ['doc.name', 'doc.title', 'doc.space', 'doc.parent', 'doc.content', 'doc.file', 'doc.tags'])
## read the import config, the import steps will need it
## first from the stored class for preserving settings, then overwrite from the request
#set($importconfig = $services.batchimport.readConfigurationFromObject($doc, "BatchImport.BatchImportClass"))
## here, for all steps besides the mapping step, overwrite the mapping list completely with the list from the request, 
## so that there are no "hidden" mappings used for the import, since the class has only " fill in presets" role, 
## the configuration itself to be used will still be passed in params  -&gt; this is to prevent validating a set of 
## steps and executing a different import because somebody else changed the stored configuration in the mean time.
#if("$!request.step_mapping" == "")
  #set($discard = $importconfig.clearFieldsMapping())
#end
#set($importconfig = $services.batchimport.readConfigurationFromRequest($importconfig))
## and put the default settings
#set($discard = $importconfig.setHeaderRow(true))
#set($discard = $importconfig.setDefaultSpace($doc.space))
#set($spaceHome = $xwiki.getDocument($doc.space, 'WebHome'))
#set($livetableObjInWebHome = $spaceHome.getObject('AppWithinMinutes.LiveTableClass'))
##set($classDocument = $livetableObjInWebHome.getProperty('class').value)
##set($discard = $importconfig.setMappingClassName($classDocument))
## try to guess the type of import by the name of the attachment
#if($services.model.serialize($importconfig.attachmentReference).endsWith(".xls"))
  #set($discard = $importconfig.setType('xls'))
#else
  #set($discard = $importconfig.setType('csv'))
#end

## before displaying the current step, save the data coming from previous step to the presets object in this document, as it is written in the read config
#saveDataToPresetsObject()

#if("$!request.step_mapping" != "")
  #displayColumnMapping()
#elseif("$!request.step_preview" != "")
  #displayMappingPreview()
#elseif("$!request.step_overwrite" != "")
  #displayOverwriteChoices()
#elseif("$!request.step_importsimulation" != "")
  #doImportSimulation()
#elseif("$!request.step_import" != "")
  #doImport()
#else
  #displayUploadFile()
#end
{{/velocity}}
</content></xwikidoc>